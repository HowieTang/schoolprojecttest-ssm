package com.yh.cms.news.controller;

import java.io.File;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Properties;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.lang3.StringUtils;
import org.apache.cxf.helpers.FileUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.servlet.ModelAndView;

import com.yh.api.service.DicService;
import com.yh.api.service.NewsService;
import com.yh.model.news.NewsModel;
import com.yh.model.news.NewsNoticeModel;
import com.yh.model.page.PageModel;
import com.yh.model.sys.DicModel;
/**
 * 新闻控制器
 * */
@Controller //此注解标识这是一个控制器
@RequestMapping("/news")
public class NewsController {
	@Autowired
	private NewsService newsService;
	
	@Autowired
	private DicService dicService;
	
	//新闻列表
	@RequestMapping("queryNewsList")
	public ModelAndView queryNewsList(PageModel page,NewsModel newsModel){
		PageModel pages = newsService.queryNewsList(page,newsModel);
		Map<String, Object> map = new HashMap<String,Object>();
		map.put("newsModel", newsModel);
		map.put("pages", pages);
		return new ModelAndView("news/news_list","map",map);
	}
	
	//投稿新闻审核列表
		@RequestMapping("queryNewsFeedList")
		public ModelAndView queryNewsFeedList(PageModel page,NewsModel newsModel){
			PageModel pages = newsService.queryNewsFeedList(page, newsModel);
			Map<String, Object> map = new HashMap<String,Object>();
			map.put("newsModel", newsModel);
			map.put("pages", pages);
			return new ModelAndView("news/newsFeed_list","map",map);
		}
	
	//新闻删除
	@RequestMapping("delete")
	public ModelAndView delete(PageModel page,NewsModel newsModel){
		newsService.deleteNewsById(newsModel);
		return queryNewsList(page, new NewsModel());
	}
	
	
	//新闻批量删除
	@RequestMapping("deleteNewsById")
	public ModelAndView deleteNewsById(PageModel page,NewsModel newsModel){
		String arr[] = newsModel.getNewsids();
		for(int a=0;a<arr.length;a++){
			String xString = arr[a];
			newsModel.setNews_id(xString);
			newsService.deleteNewsById(newsModel);
		}
		return queryNewsList(page, new NewsModel());
	}
	
	//新闻添加页面
	@RequestMapping("bfAddOrUpdate")
	public ModelAndView bfAddOrUpdate(String news_id){
		NewsModel news = new NewsModel();
		if (StringUtils.isNotEmpty(news_id)) {
			news = newsService.queryNewsById(news_id);
		}

		//查询出新闻类型返回到添加页面
		List<DicModel> dm = dicService.queryNewsType();
		Map<String, Object> resultMap = new HashMap<String,Object>();
		resultMap.put("news", news);
		resultMap.put("dm", dm);
		return new ModelAndView("news/news_add","result",resultMap);
	}
	
	//新闻添加
	@RequestMapping("addOrUpdate")
	public ModelAndView addOrUpdate(PageModel page,NewsModel newsModel){
		
		newsService.addNews(newsModel);
		return queryNewsList(page, new NewsModel());
	}
	
	
	//查看新闻前
	@RequestMapping("bfNewsLook")
	public ModelAndView bfNewsLook(String news_id){
		NewsModel news = new NewsModel();
		if (StringUtils.isNotEmpty(news_id)) {
			news = newsService.queryNewsById(news_id);
		}
		
		//类型转换传值
		byte [] c =  news.getContent();
		String str = new String(c);
		news.setContents(str);
		
		Map<String, Object> resultMap = new HashMap<String,Object>();
		resultMap.put("news", news);
		return new ModelAndView("news/newslook","result",resultMap);
	}
		
	//新闻查看
	@RequestMapping("newsLook")
	public ModelAndView newsLook(PageModel page,NewsModel news){
		return queryNewsList(page, new NewsModel());
	}
	
	
	//查看投稿新闻内容前
	@RequestMapping("bfNewsFeedLook")
	public ModelAndView bfNewsFeedLook(String news_id){
		NewsModel news = new NewsModel();
		if (StringUtils.isNotEmpty(news_id)) {
			news = newsService.queryNewsById(news_id);
		}
		
		//类型转换传值
		byte [] c =  news.getContent();
		String str = new String(c);
		news.setContents(str);
		
		Map<String, Object> resultMap = new HashMap<String,Object>();
		resultMap.put("news", news);
		return new ModelAndView("news/newsFeedLook","result",resultMap);
	}
	
	//投稿新闻查看过审
	@RequestMapping("newsFeedLook")
	public ModelAndView newsFeedLook(PageModel page,NewsModel news){
		return queryNewsFeedList(page, new NewsModel());
	}
	
	//投稿新闻审核通过
	@RequestMapping("updateNewsYes")
	public ModelAndView updateNewsYes(PageModel page,NewsModel newsModel){
		newsService.updateNewsYes(newsModel);
		return queryNewsFeedList(page, new NewsModel());
	}
	
	//投稿新闻审核未通过
	@RequestMapping("updateNewsNo")
	public ModelAndView updateNewsNo(PageModel page,NewsModel newsModel){
		newsService.updateNewsNo(newsModel);
		return queryNewsFeedList(page, new NewsModel());
	}
	
	//新闻页面渲染
	@RequestMapping("queryCampusTrends")
	public ModelAndView queryCampusTrends(){
		List<NewsModel> news = newsService.queryCampusTrends();
		List<NewsModel> news2 = newsService.queryCampusFrontier();
		List<NewsModel> news3 = newsService.queryTeacherNotes();
		List<NewsModel> news4 = newsService.queryStudentNotes();
		List<NewsModel> news5 = newsService.queryCampusNotice();
		List<NewsModel> news6 = newsService.queryCampusGrades();




		//公告轮播
		List<NewsNoticeModel> news7 = newsService.queryNoticeList();



		Map<String, Object> map = new HashMap<String,Object>();
		map.put("news", news);
		map.put("news2", news2);
		map.put("news3", news3);
		map.put("news4", news4);
		map.put("news5", news5);
		map.put("news6", news6);
		map.put("news7", news7);
		return new ModelAndView("news/welcome","map",map);
	}
	
	//查看校园新闻热点
	@RequestMapping("lookCampusTrends")
	public ModelAndView lookCampusTrends(String news_id){
		NewsModel newsModel = new NewsModel();
		newsModel = newsService.queryNewsById(news_id);
		//类型转换
		byte [] c =  newsModel.getContent();
		String str = new String(c);
		newsModel.setContents(str);
			
		Map<String, Object> resultMap = new HashMap<String,Object>();
		//先获取当前浏览量
		int a = newsModel.getPage_view();
		//当前浏览量加1
		newsModel.setPage_view(a+1);
		//走controller SQL执行 浏览量加一存入数据库
		newsService.updatePageView(newsModel);
		resultMap.put("newsModel", newsModel);
		return new ModelAndView("news/lookCampusTrends","result",resultMap);
	}
	
	//查询全部校园热点
	@RequestMapping("AllCampusTrends")
	public ModelAndView AllCampusTrends(){
		List<NewsModel> news = newsService.AllCampusTrends();
		Map<String, Object> map = new HashMap<String,Object>();
		map.put("news", news);
		return new ModelAndView("news/AllCampusTrends","map",map);
	}
	
	//点赞
	@RequestMapping("dianzan")
	public ModelAndView dianZanNum(NewsModel newsModel){
		newsService.addNumber(newsModel);
		return new ModelAndView("news/lookCampusTrends");
	}
		
	/*//图片上传
	public class FileUploadServlet extends HttpServlet {

>>>>>>> .r1454
		private static final long serialVersionUID = 5249084217809114537L;

		public FileUploadServlet() {   super();  }

		public void destroy() { super.destroy(); }

		public void doGet(HttpServletRequest request, HttpServletResponse response)    throws ServletException, IOException { }
		
		private Properties pro= new Properties();
		
		*//**
		 * 初始化时 获取核心配置文件
		 * *//*
		public void init() throws ServletException {
				pro = getUpConfig();
		}
		
		*//**
		 * post 请求
		 * *//*
		public void doPost(HttpServletRequest request, HttpServletResponse response) {
			response.setContentType("application/json");
			response.setCharacterEncoding("UTF-8");
			if("upload".equals( request.getParameter("cmd"))){
				upload(request,response);
			}
		}
		*//**
		 * 上传
		 * 注：fileinput 上传每次只上传一个文件  批量上传时会多次请求
		 * *//*
		private void upload(HttpServletRequest request, HttpServletResponse response){
			try {
		        // 配置上传参数
		        DiskFileItemFactory factory = new DiskFileItemFactory();
		        // 设置内存临界值 - 超过后将产生临时文件并存储于临时目录中
		        factory.setSizeThreshold(Integer.parseInt(pro.getProperty("memory.threshold")));
		        // 设置临时存储目录
		        factory.setRepository(new File(System.getProperty("java.io.tmpdir")));
		        ServletFileUpload upload = new ServletFileUpload(factory);
		        // 设置最大文件上传值
		        upload.setFileSizeMax(Integer.parseInt(pro.getProperty("file.maxSize")));
		        // 中文处理
		        upload.setHeaderEncoding("UTF-8"); 
		        SimpleDateFormat sdf =  new SimpleDateFormat("yyyy-MM-dd");
		        // 构建文件保存目录
		        String uploadPath = pro.getProperty("file.uploadDir")+"/"+ sdf.format(new Date());
		        // 如果目录不存在则创建
		        File uploadDir = new File(uploadPath);
		        if (!uploadDir.exists()) {
		            uploadDir.mkdir();
		        }
	            // 解析请求的内容提取文件数据
	            @SuppressWarnings("unchecked")
	            List<FileItem> formItems = upload.parseRequest(request);
	            String id = "";
	            if (formItems != null && formItems.size() > 0) {
	                // 迭代表单数据
	                for (FileItem item : formItems) {
	                    // 处理不在表单中的字段
	                    if (!item.isFormField()) {
	                        String fileName = new File(item.getName()).getName();
	                        //上传
	                        FileUtils.copyInputStreamToFile(item.getInputStream(),new File(uploadPath,fileName));
	                        //上传后保存
	                        id = saveFileInfo(uploadPath+"/"+fileName,fileName,item.getSize()+"");
	                    }
	                }
	            }
				ajax(response,id);
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
	}*/
}
